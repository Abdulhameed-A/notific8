{"version":3,"file":"jquery.notific8.min.js","sources":["jquery.notific8.js"],"names":["$","settings","methods","self","life","theme","sticky","verticalEdge","horizontalEdge","zindex","destroy","$this","data","window","unbind","removeData","buildNotification","close","notification","num","Number","animate","styles","$container","addClass","attr","hasOwnProperty","heading","append","html","find","on","duration","complete","remove","message","n","l","setTimeout","configure","options","extend","z","init","each","this","target","initContainers","$body","css","checkEdges","toLowerCase","notific8","apply","size","fn","arguments","error","jQuery"],"mappings":"CAOC,SAAUA,GACP,YAEA,IAAIC,GACAC,EACAC,CAEJF,IACIG,KAAM,IACNC,MAAO,OACPC,QAAQ,EACRC,aAAc,QACdC,eAAgB,MAChBC,OAAQ,MAGZP,EAAW,WAKP,QAASQ,GAAQC,GACFA,EAAMC,KAAK,WAEtBZ,GAAEa,QAAQC,OAAO,aACjBH,EAAMI,WAAW,YAOrB,QAASC,GAAkBL,GACvB,GAGIM,GAHAL,EAAOD,EAAMC,KAAK,YAClBM,EAAelB,EAAE,WACjBmB,EAAMC,OAAOpB,EAAE,QAAQY,KAAK,cAE5BS,EAAU,UAAYT,EAAKX,SAASM,aACpCe,KACAC,EAAavB,EAAE,8BAAgCY,EAAKX,SAASM,aAAe,IAAMK,EAAKX,SAASO,eAEpGW,IAAO,EAEPD,EAAaM,SAAS,gCAAgCA,SAASZ,EAAKX,SAASI,OAC7Ea,EAAaO,KAAK,KAAM,gCAAkCN,GAC1DnB,EAAE,QAAQY,KAAK,YAAaO,GAGxBP,EAAKX,SAASyB,eAAe,YAAgD,gBAA1Bd,GAAKX,SAAS0B,SACjET,EAAaU,OAAO5B,EAAE,WAAWwB,SAAS,2BAA2BK,KAAKjB,EAAKX,SAAS0B,UAI5FV,EAAQjB,EAAE,WAAW4B,OAAO,YACxBhB,EAAKX,SAASK,QACdW,EAAMO,SAAS,gCAAgCM,KAAK,QAAQD,KAAK,WACjEX,EAAaM,SAAS,WAEtBP,EAAMO,SAAS,yBAAyBM,KAAK,QAAQD,KAAK,KAE9DZ,EAAMc,GAAG,QAAS,WACdT,EAAOD,GAAW,KAClBH,EAAaG,QAAQC,GACjBU,SAAU,OACVC,SAAU,WACNf,EAAagB,cAIzBhB,EAAaU,OAAOX,GAGpBC,EAAaU,OAAO5B,EAAE,WAAWwB,SAAS,2BAA2BK,KAAKjB,EAAKuB,UAG/EZ,EAAWK,OAAOV,GAGlBI,EAAOD,GAAW,EAClBH,EAAaG,QAAQC,GACjBU,SAAU,OACVC,SAAU,WACNX,EAAOD,GAAW,KAClBC,EAAe,OAAI,EACdV,EAAKX,SAASK,SACd,SAAU8B,EAAGC,GACVC,WAAW,WACPF,EAAEf,QAAQC,GACNU,SAAU,OACVC,SAAU,WACNG,EAAEF,aAGXG,IACLnB,EAAcN,EAAKX,SAASG,MAElCQ,EAAKX,eASjB,QAASsC,GAAUC,GACfxC,EAAEyC,OAAOxC,EAAUuC,GAOvB,QAAS/B,GAAOiC,GACZzC,EAASQ,OAASiC,EAStB,QAASC,GAAKR,EAASK,GACnB,MAAOrC,GAAKyC,KAAK,WACb,GAAIjC,GAAQX,EAAE6C,MACVjC,EAAOD,EAAMC,KAAK,WAEtBD,GAAMC,KAAK,YACPkC,OAAQnC,EACRV,YACAkC,QAAS,KAEbvB,EAAOD,EAAMC,KAAK,YAClBA,EAAKuB,QAAUA,EAGfnC,EAAEyC,OAAO7B,EAAKX,SAAUA,EAAUuC,GAGlCxB,EAAkBL,KAO1B,QAASoC,KACL,GAAIC,GAAQhD,EAAE,OACdgD,GAAMpC,KAAK,YAAa,GACxBoC,EAAMpB,OAAO5B,EAAE,4DACfgD,EAAMpB,OAAO5B,EAAE,2DACfgD,EAAMpB,OAAO5B,EAAE,+DACfgD,EAAMpB,OAAO5B,EAAE,8DACfA,EAAE,8BAA8BiD,IAAI,UAAWhD,EAASQ,QAO5D,QAASyC,GAAWV,GAChBA,EAAQjC,aAAeiC,EAAQjC,aAAa4C,eAAiBlD,EAASM,aACtEiC,EAAQhC,eAAiBgC,EAAQhC,eAAe2C,eAAiBlD,EAASO,eAE5C,UAAzBgC,EAAQjC,cAAuD,SAAzBiC,EAAQjC,eAC/CiC,EAAQjC,aAAeN,EAASM,cAEJ,QAA3BiC,EAAQhC,gBAAyD,WAA3BgC,EAAQhC,iBAC/CgC,EAAQhC,eAAiBP,EAASO,gBAI1C,OACImC,KAAgBA,EAChBjC,QAAgBA,EAChB6B,UAAgBA,EAChB9B,OAAgBA,EAChBsC,eAAgBA,EAChBG,WAAgBA,MASxBlD,EAAEoD,SAAW,SAAUjB,EAASK,GAC5B,OAAQL,GACR,IAAK,YACL,IAAK,SACD,MAAOjC,GAAQqC,UAAUc,MAAMR,MAAOL,GAC1C,KAAK,SACD,MAAOtC,GAAQO,OAAO4C,MAAMR,MAAOL,GACvC,SAC2B,mBAAZA,KACPA,MAI2C,IAA3CxC,EAAE,8BAA8BsD,QAChCpD,EAAQ6C,iBAIZ7C,EAAQgD,WAAWV,GAGnBxC,EAAE,8BAAgCwC,EAAQjC,aAAe,IAAMiC,EAAQhC,gBAAgB4C,SAASjB,EAASK,KAQjHxC,EAAEuD,GAAGH,SAAW,SAAUjB,GAGtB,MAFAhC,GAAO0C,KAEgB,gBAAZV,GACAjC,EAAQyC,KAAKU,MAAMR,KAAMW,eAEhCxD,GAAEyD,MAAM,mEAGlBC","sourcesContent":["/**\n * @author Will Steinmetz\n * jQuery notification plug-in inspired by the notification style of Windows 8\n * Copyright (c)2013, Will Steinmetz\n * Licensed under the BSD license.\n * http://opensource.org/licenses/BSD-3-Clause\n */\n(function ($) {\n    \"use strict\";\n\n    var settings,\n        methods,\n        self;\n\n    settings = {\n        life: 10000,\n        theme: 'teal',\n        sticky: false,\n        verticalEdge: 'right',\n        horizontalEdge: 'top',\n        zindex: 1100\n    };\n\n    methods = (function () {\n        /**\n         * Destroy the notification\n         * @param object $this\n         */\n        function destroy($this) {\n            var data = $this.data('notific8');\n\n            $(window).unbind('.notific8');\n            $this.removeData('notific8');\n        }\n\n        /**\n         * Build the notification and add it to the screen's stack\n         * @param object $this\n         */\n        function buildNotification($this) {\n            var data = $this.data('notific8'),\n                notification = $('<div />'),\n                num = Number($('body').data('notific8s')),\n                close,\n                animate = 'margin-' + data.settings.verticalEdge,\n                styles = {},\n                $container = $('.jquery-notific8-container.' + data.settings.verticalEdge + '.' + data.settings.horizontalEdge);\n\n            num += 1;\n\n            notification.addClass('jquery-notific8-notification').addClass(data.settings.theme);\n            notification.attr('id', 'jquery-notific8-notification-' + num);\n            $('body').data('notific8s', num);\n\n            // check for a heading\n            if (data.settings.hasOwnProperty('heading') && (typeof data.settings.heading === \"string\")) {\n                notification.append($('<div />').addClass('jquery-notific8-heading').html(data.settings.heading));\n            }\n\n            // check if the notification is supposed to be sticky\n            close = $('<div />').append('<span />');\n            if (data.settings.sticky) {\n                close.addClass('jquery-notific8-close-sticky').find('span').html('close x');\n                notification.addClass('sticky');\n            } else {\n                close.addClass('jquery-notific8-close').find('span').html('X');\n            }\n            close.on('click', function (event) {\n                styles[animate] = -345;\n                notification.animate(styles, {\n                    duration: 'fast',\n                    complete: function () {\n                        notification.remove();\n                    }\n                });\n            });\n            notification.append(close);\n\n            // add the message\n            notification.append($('<div />').addClass('jquery-notific8-message').html(data.message));\n\n            // add the notification to the stack\n            $container.append(notification);\n\n            // slide the message onto the screen\n            styles[animate] = 0;\n            notification.animate(styles, {\n                duration: 'fast',\n                complete: function () {\n                    styles[animate] = -345;\n                    styles['height'] = 0;\n                    if (!data.settings.sticky) {\n                        (function (n, l) {\n                            setTimeout(function () {\n                                n.animate(styles, {\n                                    duration: 'fast',\n                                    complete: function () {\n                                        n.remove();\n                                    }\n                                });\n                            }, l);\n                        }(notification, data.settings.life));\n                    }\n                    data.settings = {};\n                }\n            });\n        }\n\n        /**\n         * Set up the configuration settings\n         * @param object options\n         */\n        function configure(options) {\n            $.extend(settings, options);\n        }\n\n        /**\n         * Set up the z-index\n         * @param int z\n         */\n        function zindex(z) {\n            settings.zindex = z;\n        }\n\n        /**\n         * Initialize the plug-in\n         * @param string message\n         * @param object options\n         * @return object\n         */\n        function init(message, options) {\n            return self.each(function () {\n                var $this = $(this),\n                    data = $this.data('notific8');\n\n                $this.data('notific8', {\n                    target: $this,\n                    settings: {},\n                    message: \"\"\n                });\n                data = $this.data('notific8');\n                data.message = message;\n\n                // apply the options\n                $.extend(data.settings, settings, options);\n\n                // add the notification to the stack\n                buildNotification($this);\n            });\n        }\n\n        /**\n         * Initialize the containers for the plug-in\n         */\n        function initContainers() {\n            var $body = $('body');\n            $body.data('notific8s', 0);\n            $body.append($('<div class=\"jquery-notific8-container top right\"></div>'));\n            $body.append($('<div class=\"jquery-notific8-container top left\"></div>'));\n            $body.append($('<div class=\"jquery-notific8-container bottom right\"></div>'));\n            $body.append($('<div class=\"jquery-notific8-container bottom left\"></div>'));\n            $('.jquery-notific8-container').css('z-index', settings.zindex);\n        }\n\n        /**\n         * Make sure that the edge options are ok\n         * @param object options\n         */\n        function checkEdges(options) {\n            options.verticalEdge = options.verticalEdge.toLowerCase() || settings.verticalEdge;\n            options.horizontalEdge = options.horizontalEdge.toLowerCase() || settings.horizontalEdge;\n\n            if ((options.verticalEdge !== 'right') && (options.verticalEdge !== 'left')) {\n                options.verticalEdge = settings.verticalEdge;\n            }\n            if ((options.horizontalEdge !== 'top') && (options.horizontalEdge !== 'bottom')) {\n                options.horizontalEdge = settings.horizontalEdge;\n            }\n        }\n\n        return {\n            init:           init,\n            destroy:        destroy,\n            configure:      configure,\n            zindex:         zindex,\n            initContainers: initContainers,\n            checkEdges:     checkEdges\n        };\n    }());\n\n    /**\n     * wrapper since this plug-in is called without selecting an element first\n     * @param string message\n     * @param object options\n     */\n    $.notific8 = function (message, options) {\n        switch (message) {\n        case 'configure':\n        case 'config':\n            return methods.configure.apply(this, [options]);\n        case 'zindex':\n            return methods.zindex.apply(this, [options]);\n        default:\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            // make sure that the stack containers exist\n            if ($('.jquery-notific8-container').size() === 0) {\n                methods.initContainers();\n            }\n\n            // make sure the edge settings exist\n            methods.checkEdges(options);\n\n            //display the notification in the right corner\n            $('.jquery-notific8-container.' + options.verticalEdge + '.' + options.horizontalEdge).notific8(message, options);\n            break;\n        }\n    };\n\n    /**\n     * plugin setup\n     */\n    $.fn.notific8 = function (message, options) {\n        self = this;\n\n        if (typeof message === \"string\") {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('jQuery.notific8 takes a string message as the first parameter');\n        }\n    };\n}(jQuery));\n"],"sourceRoot":"/source/"}